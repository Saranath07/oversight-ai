#!/usr/bin/env python3
"""
Detailed Cricket Transformer Inference
=====================================

Enhanced inference script that clearly shows batsman and bowler stats
as inputs and their influence on predictions.
"""

import torch
import numpy as np
from pathlib import Path
import sys

# Add parent directory to path
sys.path.append(str(Path(__file__).parent.parent))

from training.cricket_transformer import create_cricket_transformer

def load_trained_model(checkpoint_path: str = "checkpoints/best_model.pt"):
    """Load the trained cricket transformer model"""
    
    # Detect device
    if torch.backends.mps.is_available():
        device = torch.device('mps')
    elif torch.cuda.is_available():
        device = torch.device('cuda')
    else:
        device = torch.device('cpu')
    
    # Load checkpoint
    checkpoint = torch.load(checkpoint_path, map_location=device)
    config = checkpoint['config']
    vocabulary = checkpoint['vocabulary']
    idx_to_token = {v: k for k, v in vocabulary.items()}
    
    # Create and load model
    model = create_cricket_transformer(config)
    model.load_state_dict(checkpoint['model_state_dict'])
    model.to(device)
    model.eval()
    
    return model, vocabulary, idx_to_token

def create_ball_vector(over_num, ball_num, runs, extras, total_runs, wickets, balls_bowled,
                      is_wicket=False, extras_type=None, batter_avg=35.0, batter_sr=125.0, 
                      batter_runs=15, bowler_avg=28.0, bowler_sr=22.0):
    """Create 18-dimensional ball vector with player stats"""
    
    return [
        # Ball ID (2 dims)
        over_num / 20.0, ball_num / 6.0,
        # Runs (3 dims)
        runs / 6.0, extras / 5.0, (runs + extras) / 6.0,
        # Match State (3 dims)
        total_runs / 200.0, wickets / 10.0, balls_bowled / 120.0,
        # Outcomes (5 dims)
        1.0 if is_wicket else 0.0,
        1.0 if extras_type == "wd" else 0.0,
        1.0 if extras_type and extras_type.startswith("nb") else 0.0,
        1.0 if extras_type == "lb" else 0.0,
        1.0 if extras_type == "bye" else 0.0,
        # Batter Stats (3 dims) - THESE ARE THE BATSMAN INPUTS
        batter_avg / 50.0, batter_sr / 150.0, batter_runs / 100.0,
        # Bowler Stats (2 dims) - THESE ARE THE BOWLER INPUTS
        bowler_avg / 40.0, bowler_sr / 30.0
    ]

def create_context_vector(innings, current_over, current_score, current_wickets, 
                         striker_avg=35.0, striker_sr=125.0, striker_runs=25,
                         non_striker_avg=40.0, non_striker_sr=110.0, non_striker_runs=20,
                         bowler_avg=28.0, bowler_sr=22.0, bowler_wickets=1):
    """Create 20-dimensional context vector with detailed player stats"""
    
    return [
        # Match State (7 dims)
        innings / 2.0, current_over / 20.0, current_score / 200.0, current_wickets / 10.0,
        (current_over * 6) / 120.0, 1.0 if current_over <= 6 else 0.0, 6.0 / 20.0,
        # Venue/Season (2 dims)
        0.5, 0.3,
        # Striker Stats (3 dims) - STRIKER BATSMAN INPUTS
        striker_avg / 50.0, striker_sr / 150.0, striker_runs / 100.0,
        # Non-Striker Stats (3 dims) - NON-STRIKER BATSMAN INPUTS
        non_striker_avg / 50.0, non_striker_sr / 150.0, non_striker_runs / 100.0,
        # Bowler Stats (3 dims) - BOWLER INPUTS
        bowler_avg / 40.0, bowler_sr / 30.0, bowler_wickets / 5.0,
        # Head-to-Head (2 dims)
        0.5, 0.4
    ]

def predict_over(model, match_history, context, vocabulary, idx_to_token, temperature=0.8):
    """Make prediction for next over"""
    
    device = next(model.parameters()).device
    
    # Convert to tensors
    history_tensor = torch.tensor(match_history, dtype=torch.float32).unsqueeze(0).to(device)
    context_tensor = torch.tensor(context, dtype=torch.float32).unsqueeze(0).to(device)
    history_mask = torch.ones(history_tensor.shape[:2]).to(device)
    
    # Generate prediction
    with torch.no_grad():
        generated = model.generate(
            histories=history_tensor,
            contexts=context_tensor,
            start_token_id=vocabulary['<START>'],
            end_token_id=vocabulary['<END>'],
            max_length=12,
            history_mask=history_mask,
            temperature=temperature
        )
    
    # Decode prediction
    prediction = []
    for token_id in generated[0].cpu().numpy():
        if token_id == vocabulary['<END>']:
            break
        if token_id not in [vocabulary['<START>'], vocabulary['<PAD>']]:
            token = idx_to_token.get(token_id, '<UNK>')
            prediction.append(token)
    
    return prediction

def analyze_prediction_with_stats(prediction, scenario_name, striker_info, non_striker_info, bowler_info, match_info):
    """Analyze prediction with detailed player stats display"""
    
    print(f"\nüéØ {scenario_name}")
    print("=" * 60)
    
    # Display all input information
    print(f"üìä MATCH CONTEXT:")
    print(f"   Over: {match_info['over']}, Score: {match_info['score']}/{match_info['wickets']}")
    print(f"   Innings: {match_info['innings']}, Phase: {match_info['phase']}")
    
    print(f"\nüèè STRIKER (On Strike):")
    print(f"   Name: {striker_info['name']}")
    print(f"   Career Average: {striker_info['avg']:.1f}")
    print(f"   Career Strike Rate: {striker_info['sr']:.1f}")
    print(f"   Match Runs: {striker_info['match_runs']}")
    print(f"   ‚Üí INPUT TO MODEL: Avg={striker_info['avg']/50.0:.3f}, SR={striker_info['sr']/150.0:.3f}, Runs={striker_info['match_runs']/100.0:.3f}")
    
    print(f"\nüèè NON-STRIKER (Other End):")
    print(f"   Name: {non_striker_info['name']}")
    print(f"   Career Average: {non_striker_info['avg']:.1f}")
    print(f"   Career Strike Rate: {non_striker_info['sr']:.1f}")
    print(f"   Match Runs: {non_striker_info['match_runs']}")
    print(f"   ‚Üí INPUT TO MODEL: Avg={non_striker_info['avg']/50.0:.3f}, SR={non_striker_info['sr']/150.0:.3f}, Runs={non_striker_info['match_runs']/100.0:.3f}")
    
    print(f"\n‚öæ BOWLER:")
    print(f"   Name: {bowler_info['name']}")
    print(f"   Career Average: {bowler_info['avg']:.1f}")
    print(f"   Career Strike Rate: {bowler_info['sr']:.1f}")
    print(f"   Match Wickets: {bowler_info['match_wickets']}")
    print(f"   ‚Üí INPUT TO MODEL: Avg={bowler_info['avg']/40.0:.3f}, SR={bowler_info['sr']/30.0:.3f}, Wickets={bowler_info['match_wickets']/5.0:.3f}")
    
    print(f"\nüéØ MODEL PREDICTION:")
    print(f"   Predicted Over: {prediction}")
    print(f"   Number of Balls: {len(prediction)}")
    
    # Calculate runs and analyze
    runs = 0
    extras = 0
    boundaries = 0
    dots = 0
    wickets = 0
    
    for ball in prediction:
        if ball.isdigit():
            runs += int(ball)
            if int(ball) == 0:
                dots += 1
            elif int(ball) >= 4:
                boundaries += 1
        elif ball == 'wd':
            extras += 1
        elif ball.startswith('nb'):
            extras += 1
            if len(ball) > 2:
                runs += int(ball[2:])
        elif ball == 'W':
            wickets += 1
    
    total_runs = runs + extras
    
    print(f"\nüìà PREDICTION ANALYSIS:")
    print(f"   Runs: {runs}, Extras: {extras}, Total: {total_runs}")
    print(f"   Dots: {dots}, Boundaries: {boundaries}, Wickets: {wickets}")
    
    if len(prediction) > 0:
        run_rate = (total_runs / len(prediction)) * 6
        print(f"   Run Rate: {run_rate:.1f} per over")
    
    return total_runs, len(prediction)

def test_detailed_scenarios():
    """Test scenarios with detailed player stats display"""
    
    print("üèè Cricket Transformer - Detailed Player Stats Analysis")
    print("=" * 70)
    
    # Load model
    model, vocabulary, idx_to_token = load_trained_model()
    print(f"‚úì Model loaded (Epoch 6, Val Loss: 1.64)")
    
    # Scenario 1: Aggressive batsman vs economical bowler
    print(f"\nüöÄ TESTING DIFFERENT PLAYER COMBINATIONS")
    print("=" * 70)
    
    # Create match history with specific player stats
    aggressive_history = [
        create_ball_vector(1, 1, 4, 0, 4, 0, 1, batter_avg=45.0, batter_sr=150.0, batter_runs=25, bowler_avg=32.0, bowler_sr=24.0),
        create_ball_vector(1, 2, 6, 0, 10, 0, 2, batter_avg=45.0, batter_sr=150.0, batter_runs=31, bowler_avg=32.0, bowler_sr=24.0),
        create_ball_vector(1, 3, 1, 0, 11, 0, 3, batter_avg=45.0, batter_sr=150.0, batter_runs=32, bowler_avg=32.0, bowler_sr=24.0),
        create_ball_vector(1, 4, 0, 0, 11, 0, 4, batter_avg=45.0, batter_sr=150.0, batter_runs=32, bowler_avg=32.0, bowler_sr=24.0),
        create_ball_vector(1, 5, 4, 0, 15, 0, 5, batter_avg=45.0, batter_sr=150.0, batter_runs=36, bowler_avg=32.0, bowler_sr=24.0),
    ]
    
    aggressive_context = create_context_vector(1, 2, 15, 0, 
                                             striker_avg=45.0, striker_sr=150.0, striker_runs=36,
                                             non_striker_avg=38.0, non_striker_sr=125.0, non_striker_runs=12,
                                             bowler_avg=32.0, bowler_sr=24.0, bowler_wickets=0)
    
    striker_info = {"name": "Virat Kohli", "avg": 45.0, "sr": 150.0, "match_runs": 36}
    non_striker_info = {"name": "KL Rahul", "avg": 38.0, "sr": 125.0, "match_runs": 12}
    bowler_info = {"name": "Jasprit Bumrah", "avg": 32.0, "sr": 24.0, "match_wickets": 0}
    match_info = {"over": 2, "score": 15, "wickets": 0, "innings": 1, "phase": "Powerplay"}
    
    pred1 = predict_over(model, aggressive_history, aggressive_context, vocabulary, idx_to_token)
    analyze_prediction_with_stats(pred1, "AGGRESSIVE BATSMAN vs QUALITY BOWLER", 
                                striker_info, non_striker_info, bowler_info, match_info)
    
    # Scenario 2: Defensive batsman vs attacking bowler
    defensive_history = [
        create_ball_vector(8, 1, 1, 0, 45, 2, 43, batter_avg=28.0, batter_sr=95.0, batter_runs=8, bowler_avg=38.0, bowler_sr=28.0),
        create_ball_vector(8, 2, 0, 0, 45, 2, 44, batter_avg=28.0, batter_sr=95.0, batter_runs=8, bowler_avg=38.0, bowler_sr=28.0),
        create_ball_vector(8, 3, 1, 0, 46, 2, 45, batter_avg=28.0, batter_sr=95.0, batter_runs=9, bowler_avg=38.0, bowler_sr=28.0),
        create_ball_vector(8, 4, 0, 0, 46, 2, 46, batter_avg=28.0, batter_sr=95.0, batter_runs=9, bowler_avg=38.0, bowler_sr=28.0),
        create_ball_vector(8, 5, 2, 0, 48, 2, 47, batter_avg=28.0, batter_sr=95.0, batter_runs=11, bowler_avg=38.0, bowler_sr=28.0),
    ]
    
    defensive_context = create_context_vector(1, 9, 48, 2,
                                            striker_avg=28.0, striker_sr=95.0, striker_runs=11,
                                            non_striker_avg=32.0, non_striker_sr=110.0, non_striker_runs=15,
                                            bowler_avg=38.0, bowler_sr=28.0, bowler_wickets=1)
    
    striker_info2 = {"name": "Cheteshwar Pujara", "avg": 28.0, "sr": 95.0, "match_runs": 11}
    non_striker_info2 = {"name": "Ajinkya Rahane", "avg": 32.0, "sr": 110.0, "match_runs": 15}
    bowler_info2 = {"name": "Rashid Khan", "avg": 38.0, "sr": 28.0, "match_wickets": 1}
    match_info2 = {"over": 9, "score": 48, "wickets": 2, "innings": 1, "phase": "Middle Overs"}
    
    pred2 = predict_over(model, defensive_history, defensive_context, vocabulary, idx_to_token)
    analyze_prediction_with_stats(pred2, "DEFENSIVE BATSMAN vs WICKET-TAKING BOWLER", 
                                striker_info2, non_striker_info2, bowler_info2, match_info2)
    
    # Scenario 3: Power hitter vs death bowler
    power_history = [
        create_ball_vector(18, 1, 6, 0, 145, 4, 103, batter_avg=35.0, batter_sr=165.0, batter_runs=42, bowler_avg=28.0, bowler_sr=18.0),
        create_ball_vector(18, 2, 4, 0, 149, 4, 104, batter_avg=35.0, batter_sr=165.0, batter_runs=46, bowler_avg=28.0, bowler_sr=18.0),
        create_ball_vector(18, 3, 1, 0, 150, 4, 105, batter_avg=35.0, batter_sr=165.0, batter_runs=47, bowler_avg=28.0, bowler_sr=18.0),
        create_ball_vector(18, 4, 6, 0, 156, 4, 106, batter_avg=35.0, batter_sr=165.0, batter_runs=53, bowler_avg=28.0, bowler_sr=18.0),
        create_ball_vector(18, 5, 2, 0, 158, 4, 107, batter_avg=35.0, batter_sr=165.0, batter_runs=55, bowler_avg=28.0, bowler_sr=18.0),
    ]
    
    power_context = create_context_vector(1, 19, 158, 4,
                                        striker_avg=35.0, striker_sr=165.0, striker_runs=55,
                                        non_striker_avg=30.0, non_striker_sr=140.0, non_striker_runs=28,
                                        bowler_avg=28.0, bowler_sr=18.0, bowler_wickets=2)
    
    striker_info3 = {"name": "Andre Russell", "avg": 35.0, "sr": 165.0, "match_runs": 55}
    non_striker_info3 = {"name": "Kieron Pollard", "avg": 30.0, "sr": 140.0, "match_runs": 28}
    bowler_info3 = {"name": "Trent Boult", "avg": 28.0, "sr": 18.0, "match_wickets": 2}
    match_info3 = {"over": 19, "score": 158, "wickets": 4, "innings": 1, "phase": "Death Overs"}
    
    pred3 = predict_over(model, power_history, power_context, vocabulary, idx_to_token)
    analyze_prediction_with_stats(pred3, "POWER HITTER vs DEATH BOWLER", 
                                striker_info3, non_striker_info3, bowler_info3, match_info3)
    
    print(f"\nüéØ KEY INSIGHTS:")
    print("=" * 70)
    print("‚úÖ Player stats are embedded in BOTH match history and context vectors")
    print("‚úÖ Model considers batsman averages, strike rates, and current form")
    print("‚úÖ Bowler stats (average, strike rate, wickets) influence predictions")
    print("‚úÖ Different player combinations produce different prediction patterns")
    print("‚úÖ Model balances player abilities with match situation")

if __name__ == "__main__":
    test_detailed_scenarios()